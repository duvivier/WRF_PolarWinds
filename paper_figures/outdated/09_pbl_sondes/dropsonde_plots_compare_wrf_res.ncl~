;***************************************
; PROGRAM DESCRIPTION: This script plots frequency information for
;                      a SOM trained with three data sets
; INPUT DATA: SOM date and visual files for three data types
; OUTPUT DATA: One  plot of frequency comparisons
; CREATOR: Matt Higgins(Oct 2008), Melissa Nigro (Aug 2011)
;          Modified by Alice DuVivier - April 2012
;***************************************
load "$NCARG_ROOT/lib/ncarg/nclscripts/csm/gsn_code.ncl"
load "$NCARG_ROOT/lib/ncarg/nclscripts/csm/gsn_csm.ncl"
load "$NCARG_ROOT/lib/ncarg/nclscripts/csm/contributed.ncl"
load "$NCARG_ROOT/lib/ncarg/nclscripts/csm/shea_util.ncl"
;***************************************
begin
; MANUAL INPUTS - for testing purposes
; ******************************************************
  name  = "205909"
  tag0 = "D5"

  fname1 = "PW-05-40-M-bn"
  fname2 = "PW-10-40-M-bn"
  fname3 = "PW-25-40-M-bn"
  fname4 = "PW-50-40-M-bn"
  fname5 = "PW-05-60-M-bn"
  fname6 = "PW-10-60-M-bn"
  tag1 = "W05-40"
  tag2 = "W10-40"
  tag3 = "W25-40"
  tag4 = "W50-40"
  tag5 = "W05-60"
  tag6 = "W10-60" 
; ******************************************************
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
; BEGIN SCRIPT
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
print("Plotting polar winds dropsondes and wrf simulations")
nwrf = 6

; get wrf date to load - nearest in time to the actual dropsonde time
if (name .eq. "190950")then
   date = "2015-05-21_19-00"
   lat = 67.662432
   lon = -31.29614
end if
if (name .eq. "192456")then
   date = "2015-05-21_19-20"
   lat = 68.646938
   lon = -32.501456
end if
if (name .eq. "194625")then
   date = "2015-05-21_19-40"
   lat = 67.516306
   lon = -28.718051
end if
if (name .eq. "201031")then
   date = "2015-05-21_20-00"
   lat = 67.367052
   lon = -26.550869
end if
if (name .eq. "203004")then
   date = "2015-05-21_20-20"
   lat = 68.175776
   lon = -26.645214
end if
if (name .eq. "204411")then
   date = "2015-05-21_20-40"
   lat = 67.667818
   lon = -25.218717
end if
if (name .eq. "205909")then
   date = "2015-05-21_21-00"
   lat = 68.606772
   lon = -25.695999
end if
if (name .eq. "211845")then
   date = "2015-05-21_21-20"
   lat = 67.168047
   lon = -23.482644
end if

; select preferences for figure title based on # of values
outdir = "./"
fout   = outdir+"comp_dropsondes_wrf_resolutions_"+tag0

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
; Get data for dropsonde comparisons
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; select input directory
indir    = "/data/duvivier/polar_winds/DATA/"

;;;;;;;;
; dropsonde
;;;;;;;;
print("Loading dropsonde data")
inname  = indir+"Polar_Winds_Campaign2_Dropsondes_121015/Drop_20150521-"+name+"_L2_final.dat"
; load header
head = readAsciiHead(inname,1)
; load data
dum = readAsciiTable(inname,19,"float",1)
; replace nans
if (any(isnan_ieee(dum)))then
   fill = -9999999.99
   replace_ieeenan (dum,fill,0)
   dum@_FillValue = fill
end if
; locations of all data determined by useing dropsonde_readme.txt
temp_ds = dum(:,2)   ; in degC
ws_ds   = dum(:,13)  ; in m/s
wd_ds   = dum(:,14)  ; in deg
hgt_ds  = dum(:,16)  ; in m above msl
delete([/inname,dum/])

; number of heights in dropsonde
dims = dimsizes(hgt_ds)
nhgt_ds = dims(0)
delete(dims)

;;;;;;;;
; WRF values - loop through all resolutions
;;;;;;;;
; get information from file names that will be relevant
dum = stringtochar(fname1)
rad1 = stringtofloat(chartostring(dum(3:4)))
nvert1 = stringtoint(chartostring(dum(6:7)))
delete(dum)
dum = stringtochar(fname2)
rad2 = stringtofloat(chartostring(dum(3:4)))
nvert2 = stringtoint(chartostring(dum(6:7)))
delete(dum)
dum = stringtochar(fname3)
rad3 = stringtofloat(chartostring(dum(3:4)))
nvert3 = stringtoint(chartostring(dum(6:7)))
delete(dum)
dum = stringtochar(fname4)
rad4 = stringtofloat(chartostring(dum(3:4)))
nvert4 = stringtoint(chartostring(dum(6:7)))
delete(dum)
dum = stringtochar(fname5)
rad5 = stringtofloat(chartostring(dum(3:4)))
nvert5 = stringtoint(chartostring(dum(6:7)))
delete(dum)
dum = stringtochar(fname6)
rad6 = stringtofloat(chartostring(dum(3:4)))
nvert6 = stringtoint(chartostring(dum(6:7)))
delete(dum)
dum = new((/nwrf/),integer)
dum(0) = nvert1
dum(1) = nvert2
dum(2) = nvert3
dum(3) = nvert4
dum(4) = nvert5
dum(5) = nvert6
nhgt = max(dum) -1

; preallocate arrays
hgt_w_pt  = new((/nwrf,nhgt/),"float")
temp_w_pt = new((/nwrf,nhgt/),"float")
ws_w_pt   = new((/nwrf,nhgt/),"float")
wd_w_pt   = new((/nwrf,nhgt/),"float")
hgt_w_av  = new((/nwrf,nhgt/),"float")
temp_w_av = new((/nwrf,nhgt/),"float")
ws_w_av   = new((/nwrf,nhgt/),"float")
wd_w_av   = new((/nwrf,nhgt/),"float")

print("Loading data for "+name)
   inname1 = indir+fname1+"/wrfout-cf/wrf-"+date+"."+fname1+"-cf.nc"
   f1 = addfile(inname1,"r")
   lat2d_1 = f1->lat
   lon2d_1 = f1->lon

   inname2 = indir+fname2+"/wrfout-cf/wrf-"+date+"."+fname2+"-cf.nc"
   f2 = addfile(inname2,"r")
   lat2d_2 = f2->lat
   lon2d_2 = f2->lon

   inname3 = indir+fname3+"/wrfout-cf/wrf-"+date+"."+fname3+"-cf.nc"
   f3 = addfile(inname3,"r")
   lat2d_3 = f3->lat
   lon2d_3 = f3->lon

   inname4 = indir+fname4+"/wrfout-cf/wrf-"+date+"."+fname4+"-cf.nc"
   f4 = addfile(inname4,"r")
   lat2d_4 = f4->lat
   lon2d_4 = f4->lon

   inname5 = indir+fname5+"/wrfout-cf/wrf-"+date+"."+fname5+"-cf.nc"
   f5 = addfile(inname5,"r")
   lat2d_5 = f5->lat
   lon2d_5 = f5->lon

   inname6 = indir+fname6+"/wrfout-cf/wrf-"+date+"."+fname6+"-cf.nc"
   f6 = addfile(inname6,"r")
   lat2d_6 = f6->lat
   lon2d_6 = f6->lon

   ;;; single nearest point
   ; get nearest ij
   ij = getind_latlon2d(lat2d_1, lon2d_1, lat, lon)
   i1 = ij(0,0)
   j1 = ij(0,1)
   delete(ij)
   ij = getind_latlon2d(lat2d_2, lon2d_2, lat, lon)
   i2 = ij(0,0)
   j2 = ij(0,1)
   delete(ij)
   ij = getind_latlon2d(lat2d_3, lon2d_3, lat, lon)
   i3 = ij(0,0)
   j3 = ij(0,1)
   delete(ij)
   ij = getind_latlon2d(lat2d_4, lon2d_4, lat, lon)
   i4 = ij(0,0)
   j4 = ij(0,1)
   delete(ij)
   ij = getind_latlon2d(lat2d_5, lon2d_5, lat, lon)
   i5 = ij(0,0)
   j5 = ij(0,1)
   delete(ij)
   ij = getind_latlon2d(lat2d_6, lon2d_6, lat, lon)
   i6 = ij(0,0)
   j6 = ij(0,1)
   delete(ij)

   ; load data at single point
   hgt_w_pt(0,0:nvert1-2)     = f1->Z_e(0,0:nvert1-2,i1,j1)
   temp_w_pt(0,0:nvert1-2)    = (f1->T_e(0,0:nvert1-2,i1,j1)) - 273.15   ; in degC
   u_dum             = f1->u_tr_e(0,0:nvert1-2,i1,j1)   ; in m/s
   v_dum             = f1->v_tr_e(0,0:nvert1-2,i1,j1)   ; in m/s
   ws_w_pt(0,0:nvert1-2)      = sqrt(u_dum^2 + v_dum^2)
   wd_w_pt(0,0:nvert1-2)      = wind_direction(u_dum,v_dum,0)
   delete([/u_dum,v_dum/])

   ; load data at single point
   hgt_w_pt(1,0:nvert2-2)     = f2->Z_e(0,0:nvert2-2,i2,j2)
   temp_w_pt(1,0:nvert2-2)    = (f2->T_e(0,0:nvert2-2,i2,j2)) - 273.15   ; in degC
   u_dum             = f2->u_tr_e(0,0:nvert2-2,i2,j2)   ; in m/s
   v_dum             = f2->v_tr_e(0,0:nvert2-2,i2,j2)   ; in m/s
   ws_w_pt(1,0:nvert2-2)      = sqrt(u_dum^2 + v_dum^2)
   wd_w_pt(1,0:nvert2-2)      = wind_direction(u_dum,v_dum,0)
   delete([/u_dum,v_dum/])

   ; load data at single point
   hgt_w_pt(2,0:nvert3-2)     = f3->Z_e(0,0:nvert3-2,i3,j3)
   temp_w_pt(2,0:nvert3-2)    = (f3->T_e(0,0:nvert3-2,i3,j3)) - 273.15   ; in degC
   u_dum             = f3->u_tr_e(0,0:nvert3-2,i3,j3)   ; in m/s
   v_dum             = f3->v_tr_e(0,0:nvert3-2,i3,j3)   ; in m/s
   ws_w_pt(2,0:nvert3-2)      = sqrt(u_dum^2 + v_dum^2)
   wd_w_pt(2,0:nvert3-2)      = wind_direction(u_dum,v_dum,0)
   delete([/u_dum,v_dum/])

   ; load data at single point
   hgt_w_pt(3,0:nvert4-2)     = f4->Z_e(0,0:nvert4-2,i4,j4)
   temp_w_pt(3,0:nvert4-2)    = (f4->T_e(0,0:nvert4-2,i4,j4)) - 273.15   ; in degC
   u_dum             = f4->u_tr_e(0,0:nvert4-2,i4,j4)   ; in m/s
   v_dum             = f4->v_tr_e(0,0:nvert4-2,i4,j4)   ; in m/s
   ws_w_pt(3,0:nvert4-2)      = sqrt(u_dum^2 + v_dum^2)
   wd_w_pt(3,0:nvert4-2)      = wind_direction(u_dum,v_dum,0)
   delete([/u_dum,v_dum/])

   ; load data at single point
   hgt_w_pt(4,0:nvert5-2)     = f5->Z_e(0,0:nvert5-2,i5,j5)
   temp_w_pt(4,0:nvert5-2)    = (f5->T_e(0,0:nvert5-2,i5,j5)) - 273.15   ; in degC
   u_dum             = f5->u_tr_e(0,0:nvert5-2,i5,j5)   ; in m/s
   v_dum             = f5->v_tr_e(0,0:nvert5-2,i5,j5)   ; in m/s
   ws_w_pt(4,0:nvert5-2)      = sqrt(u_dum^2 + v_dum^2)
   wd_w_pt(4,0:nvert5-2)      = wind_direction(u_dum,v_dum,0)
   delete([/u_dum,v_dum/])

   ; load data at single point
   hgt_w_pt(5,0:nvert6-2)     = f6->Z_e(0,0:nvert6-2,i6,j6)
   temp_w_pt(5,0:nvert6-2)    = (f6->T_e(0,0:nvert6-2,i6,j6)) - 273.15   ; in degC
   u_dum             = f6->u_tr_e(0,0:nvert6-2,i6,j6)   ; in m/s
   v_dum             = f6->v_tr_e(0,0:nvert6-2,i6,j6)   ; in m/s
   ws_w_pt(5,0:nvert6-2)      = sqrt(u_dum^2 + v_dum^2)
   wd_w_pt(5,0:nvert6-2)      = wind_direction(u_dum,v_dum,0)
   delete([/u_dum,v_dum/])

   ;;; weighted average of 4 nearest points

   ; file 1
   ; get lat/lon of nearest 9
   lat_sub = lat2d_1(i1-1:i1+1,j1-1:j1+1)
   lon_sub = lon2d_1(i1-1:i1+1,j1-1:j1+1)

   ; get great circle distance between the different grids in km
   dist = gc_latlon(lat,lon,lat_sub,lon_sub,5,4) 
   dist@_FillValue = -999999.9
   dist1d = ndtooned(dist)
   qsort(dist1d)

   ; mask all but the 4 closest points
   dist = where(dist.eq.dist1d(0) .or. dist.eq.dist1d(1) .or. dist.eq.dist1d(2) .or. dist.eq.dist1d(3), dist, dist@_FillValue)
   weight = exp(-(dist^2)/(2*rad1^2))

   ; load data at 9 points
   hgt_dum        = f1->Z_e(0,:,i1-1:i1+1,j1-1:j1+1)
   temp_dum       = (f1->T_e(0,:,i1-1:i1+1,j1-1:j1+1)) - 273.15   ; in degC
   u_dum          = f1->u_tr_e(0,:,i1-1:i1+1,j1-1:j1+1)   ; in m/s
   v_dum          = f1->v_tr_e(0,:,i1-1:i1+1,j1-1:j1+1)   ; in m/s
   ; get averages of closest points
   n = 0
   do n = 0, nvert1-2
      hgt_w_av(0,n)    = sum(hgt_dum(n,:,:)*weight)/sum(weight)
      temp_w_av(0,n)   = sum(temp_dum(n,:,:)*weight)/sum(weight)   
      u_dum1         = sum(u_dum(n,:,:)*weight)/sum(weight)  
      v_dum1         = sum(v_dum(n,:,:)*weight)/sum(weight)  
      ws_w_av(0,n)     = sqrt(u_dum1^2 + v_dum1^2)
      wd_w_av(0,n)     = wind_direction(u_dum1, v_dum1,0)
      delete([/u_dum1,v_dum1/])
   end do
   delete([/dist,dist1d,weight,lat_sub,lon_sub,hgt_dum,temp_dum,u_dum,v_dum/])

   ; file 2
   ; get lat/lon of nearest 9
   lat_sub = lat2d_2(i2-1:i2+1,j2-1:j2+1)
   lon_sub = lon2d_2(i2-1:i2+1,j2-1:j2+1)

   ; get great circle distance between the different grids in km
   dist = gc_latlon(lat,lon,lat_sub,lon_sub,5,4) 
   dist@_FillValue = -999999.9
   dist1d = ndtooned(dist)
   qsort(dist1d)

   ; mask all but the 4 closest points
   dist = where(dist.eq.dist1d(0) .or. dist.eq.dist1d(1) .or. dist.eq.dist1d(2) .or. dist.eq.dist1d(3), dist, dist@_FillValue)
   weight = exp(-(dist^2)/(2*rad1^2))

   ; load data at 9 points
   hgt_dum        = f2->Z_e(0,:,i2-1:i2+1,j2-1:j2+1)
   temp_dum       = (f2->T_e(0,:,i2-1:i2+1,j2-1:j2+1)) - 273.15   ; in degC
   u_dum          = f2->u_tr_e(0,:,i2-1:i2+1,j2-1:j2+1)   ; in m/s
   v_dum          = f2->v_tr_e(0,:,i2-1:i2+1,j2-1:j2+1)   ; in m/s
   ; get averages of closest points
   n = 0
   do n = 0, nvert2-2
      hgt_w_av(1,n)    = sum(hgt_dum(n,:,:)*weight)/sum(weight)
      temp_w_av(1,n)   = sum(temp_dum(n,:,:)*weight)/sum(weight)   
      u_dum1         = sum(u_dum(n,:,:)*weight)/sum(weight)  
      v_dum1         = sum(v_dum(n,:,:)*weight)/sum(weight)  
      ws_w_av(1,n)     = sqrt(u_dum1^2 + v_dum1^2)
      wd_w_av(1,n)     = wind_direction(u_dum1, v_dum1,0)
      delete([/u_dum1,v_dum1/])
   end do
   delete([/dist,dist1d,weight,lat_sub,lon_sub,hgt_dum,temp_dum,u_dum,v_dum/])

   ; file 3
   ; get lat/lon of nearest 9
   lat_sub = lat2d_3(i3-1:i3+1,j3-1:j3+1)
   lon_sub = lon2d_3(i3-1:i3+1,j3-1:j3+1)

   ; get great circle distance between the different grids in km
   dist = gc_latlon(lat,lon,lat_sub,lon_sub,5,4) 
   dist@_FillValue = -999999.9
   dist1d = ndtooned(dist)
   qsort(dist1d)

   ; mask all but the 4 closest points
   dist = where(dist.eq.dist1d(0) .or. dist.eq.dist1d(1) .or. dist.eq.dist1d(2) .or. dist.eq.dist1d(3), dist, dist@_FillValue)
   weight = exp(-(dist^2)/(2*rad1^2))

   ; load data at 9 points
   hgt_dum        = f3->Z_e(0,:,i3-1:i3+1,j3-1:j3+1)
   temp_dum       = (f3->T_e(0,:,i3-1:i3+1,j3-1:j3+1)) - 273.15   ; in degC
   u_dum          = f3->u_tr_e(0,:,i3-1:i3+1,j3-1:j3+1)   ; in m/s
   v_dum          = f3->v_tr_e(0,:,i3-1:i3+1,j3-1:j3+1)   ; in m/s
   ; get averages of closest points
   n = 0
   do n = 0, nvert3-2
      hgt_w_av(2,n)    = sum(hgt_dum(n,:,:)*weight)/sum(weight)
      temp_w_av(2,n)   = sum(temp_dum(n,:,:)*weight)/sum(weight)   
      u_dum1         = sum(u_dum(n,:,:)*weight)/sum(weight)  
      v_dum1         = sum(v_dum(n,:,:)*weight)/sum(weight)  
      ws_w_av(2,n)     = sqrt(u_dum1^2 + v_dum1^2)
      wd_w_av(2,n)     = wind_direction(u_dum1, v_dum1,0)
      delete([/u_dum1,v_dum1/])
   end do
   delete([/dist,dist1d,weight,lat_sub,lon_sub,hgt_dum,temp_dum,u_dum,v_dum/])

   ; file 4
   ; get lat/lon of nearest 9
   lat_sub = lat2d_4(i4-1:i4+1,j4-1:j4+1)
   lon_sub = lon2d_4(i4-1:i4+1,j4-1:j4+1)

   ; get great circle distance between the different grids in km
   dist = gc_latlon(lat,lon,lat_sub,lon_sub,5,4) 
   dist@_FillValue = -999999.9
   dist1d = ndtooned(dist)
   qsort(dist1d)

   ; mask all but the 4 closest points
   dist = where(dist.eq.dist1d(0) .or. dist.eq.dist1d(1) .or. dist.eq.dist1d(2) .or. dist.eq.dist1d(3), dist, dist@_FillValue)
   weight = exp(-(dist^2)/(2*rad1^2))

   ; load data at 9 points
   hgt_dum        = f4->Z_e(0,:,i4-1:i4+1,j4-1:j4+1)
   temp_dum       = (f4->T_e(0,:,i4-1:i4+1,j4-1:j4+1)) - 273.15   ; in degC
   u_dum          = f4->u_tr_e(0,:,i4-1:i4+1,j4-1:j4+1)   ; in m/s
   v_dum          = f4->v_tr_e(0,:,i4-1:i4+1,j4-1:j4+1)   ; in m/s
   ; get averages of closest points
   n = 0
   do n = 0, nvert4-2
      hgt_w_av(3,n)    = sum(hgt_dum(n,:,:)*weight)/sum(weight)
      temp_w_av(3,n)   = sum(temp_dum(n,:,:)*weight)/sum(weight)   
      u_dum1         = sum(u_dum(n,:,:)*weight)/sum(weight)  
      v_dum1         = sum(v_dum(n,:,:)*weight)/sum(weight)  
      ws_w_av(3,n)     = sqrt(u_dum1^2 + v_dum1^2)
      wd_w_av(3,n)     = wind_direction(u_dum1, v_dum1,0)
      delete([/u_dum1,v_dum1/])
   end do
   delete([/dist,dist1d,weight,lat_sub,lon_sub,hgt_dum,temp_dum,u_dum,v_dum/])

   ; file 5
   ; get lat/lon of nearest 9
   lat_sub = lat2d_5(i5-1:i5+1,j5-1:j5+1)
   lon_sub = lon2d_5(i5-1:i5+1,j5-1:j5+1)

   ; get great circle distance between the different grids in km
   dist = gc_latlon(lat,lon,lat_sub,lon_sub,5,4) 
   dist@_FillValue = -999999.9
   dist1d = ndtooned(dist)
   qsort(dist1d)

   ; mask all but the 4 closest points
   dist = where(dist.eq.dist1d(0) .or. dist.eq.dist1d(1) .or. dist.eq.dist1d(2) .or. dist.eq.dist1d(3), dist, dist@_FillValue)
   weight = exp(-(dist^2)/(2*rad1^2))

   ; load data at 9 points
   hgt_dum        = f5->Z_e(0,:,i5-1:i5+1,j5-1:j5+1)
   temp_dum       = (f5->T_e(0,:,i5-1:i5+1,j5-1:j5+1)) - 273.15   ; in degC
   u_dum          = f5->u_tr_e(0,:,i5-1:i5+1,j5-1:j5+1)   ; in m/s
   v_dum          = f5->v_tr_e(0,:,i5-1:i5+1,j5-1:j5+1)   ; in m/s
   ; get averages of closest points
   n = 0
   do n = 0, nvert5-2
      hgt_w_av(4,n)    = sum(hgt_dum(n,:,:)*weight)/sum(weight)
      temp_w_av(4,n)   = sum(temp_dum(n,:,:)*weight)/sum(weight)   
      u_dum1         = sum(u_dum(n,:,:)*weight)/sum(weight)  
      v_dum1         = sum(v_dum(n,:,:)*weight)/sum(weight)  
      ws_w_av(4,n)     = sqrt(u_dum1^2 + v_dum1^2)
      wd_w_av(4,n)     = wind_direction(u_dum1, v_dum1,0)
      delete([/u_dum1,v_dum1/])
   end do
   delete([/dist,dist1d,weight,lat_sub,lon_sub,hgt_dum,temp_dum,u_dum,v_dum/])

   ; file 6
   ; get lat/lon of nearest 9
   lat_sub = lat2d_6(i6-1:i6+1,j6-1:j6+1)
   lon_sub = lon2d_6(i6-1:i6+1,j6-1:j6+1)

   ; get great circle distance between the different grids in km
   dist = gc_latlon(lat,lon,lat_sub,lon_sub,5,4) 
   dist@_FillValue = -999999.9
   dist1d = ndtooned(dist)
   qsort(dist1d)

   ; mask all but the 4 closest points
   dist = where(dist.eq.dist1d(0) .or. dist.eq.dist1d(1) .or. dist.eq.dist1d(2) .or. dist.eq.dist1d(3), dist, dist@_FillValue)
   weight = exp(-(dist^2)/(2*rad1^2))

   ; load data at 9 points
   hgt_dum        = f6->Z_e(0,:,i6-1:i6+1,j6-1:j6+1)
   temp_dum       = (f6->T_e(0,:,i6-1:i6+1,j6-1:j6+1)) - 273.15   ; in degC
   u_dum          = f6->u_tr_e(0,:,i6-1:i6+1,j6-1:j6+1)   ; in m/s
   v_dum          = f6->v_tr_e(0,:,i6-1:i6+1,j6-1:j6+1)   ; in m/s
   ; get averages of closest points
   n = 0
   do n = 0, nvert6-2
      hgt_w_av(5,n)    = sum(hgt_dum(n,:,:)*weight)/sum(weight)
      temp_w_av(5,n)   = sum(temp_dum(n,:,:)*weight)/sum(weight)   
      u_dum1         = sum(u_dum(n,:,:)*weight)/sum(weight)  
      v_dum1         = sum(v_dum(n,:,:)*weight)/sum(weight)  
      ws_w_av(5,n)     = sqrt(u_dum1^2 + v_dum1^2)
      wd_w_av(5,n)     = wind_direction(u_dum1, v_dum1,0)
      delete([/u_dum1,v_dum1/])
   end do
   delete([/dist,dist1d,weight,lat_sub,lon_sub,hgt_dum,temp_dum,u_dum,v_dum/])

;;;;;;;;
; combine arrays into ones for plotting
;;;;;;;;
; points
hgt_pt  = new((/nwrf+1,nhgt_ds/),"float")
temp_pt = new((/nwrf+1,nhgt_ds/),"float")
ws_pt   = new((/nwrf+1,nhgt_ds/),"float")
wd_pt   = new((/nwrf+1,nhgt_ds/),"float")
hgt_pt(0,:) = hgt_ds
hgt_pt(1,0:nhgt-1) = hgt_w_pt(0,:)
hgt_pt(2,0:nhgt-1) = hgt_w_pt(1,:)
hgt_pt(3,0:nhgt-1) = hgt_w_pt(2,:)
hgt_pt(4,0:nhgt-1) = hgt_w_pt(3,:)
hgt_pt(5,0:nhgt-1) = hgt_w_pt(4,:)
hgt_pt(6,0:nhgt-1) = hgt_w_pt(5,:)
temp_pt(0,:) = temp_ds
temp_pt(1,0:nhgt-1) = temp_w_pt(0,:)
temp_pt(2,0:nhgt-1) = temp_w_pt(1,:)
temp_pt(3,0:nhgt-1) = temp_w_pt(2,:)
temp_pt(4,0:nhgt-1) = temp_w_pt(3,:)
temp_pt(5,0:nhgt-1) = temp_w_pt(4,:)
temp_pt(6,0:nhgt-1) = temp_w_pt(5,:)
ws_pt(0,:) = ws_ds
ws_pt(1,0:nhgt-1) = ws_w_pt(0,:)
ws_pt(2,0:nhgt-1) = ws_w_pt(1,:)
ws_pt(3,0:nhgt-1) = ws_w_pt(2,:)
ws_pt(4,0:nhgt-1) = ws_w_pt(3,:)
ws_pt(5,0:nhgt-1) = ws_w_pt(4,:)
ws_pt(6,0:nhgt-1) = ws_w_pt(5,:)
wd_pt(0,:) = wd_ds
wd_pt(1,0:nhgt-1) = wd_w_pt(0,:)
wd_pt(2,0:nhgt-1) = wd_w_pt(1,:)
wd_pt(3,0:nhgt-1) = wd_w_pt(2,:)
wd_pt(4,0:nhgt-1) = wd_w_pt(3,:)
wd_pt(5,0:nhgt-1) = wd_w_pt(4,:)
wd_pt(6,0:nhgt-1) = wd_w_pt(5,:)

; 4 point averages
hgt_av  = new((/nwrf+1,nhgt_ds/),"float")
temp_av = new((/nwrf+1,nhgt_ds/),"float")
ws_av   = new((/nwrf+1,nhgt_ds/),"float")
wd_av   = new((/nwrf+1,nhgt_ds/),"float")
hgt_av(0,:) = hgt_ds
hgt_av(1,0:nhgt-1) = hgt_w_av(0,:)
hgt_av(2,0:nhgt-1) = hgt_w_av(1,:)
hgt_av(3,0:nhgt-1) = hgt_w_av(2,:)
hgt_av(4,0:nhgt-1) = hgt_w_av(3,:)
hgt_av(5,0:nhgt-1) = hgt_w_av(4,:)
hgt_av(6,0:nhgt-1) = hgt_w_av(5,:)
temp_av(0,:) = temp_ds
temp_av(1,0:nhgt-1) = temp_w_av(0,:)
temp_av(2,0:nhgt-1) = temp_w_av(1,:)
temp_av(3,0:nhgt-1) = temp_w_av(2,:)
temp_av(4,0:nhgt-1) = temp_w_av(3,:)
temp_av(5,0:nhgt-1) = temp_w_av(4,:)
temp_av(6,0:nhgt-1) = temp_w_av(5,:)
ws_av(0,:) = ws_ds
ws_av(1,0:nhgt-1) = ws_w_av(0,:)
ws_av(2,0:nhgt-1) = ws_w_av(1,:)
ws_av(3,0:nhgt-1) = ws_w_av(2,:)
ws_av(4,0:nhgt-1) = ws_w_av(3,:)
ws_av(5,0:nhgt-1) = ws_w_av(4,:)
ws_av(6,0:nhgt-1) = ws_w_av(5,:)
wd_av(0,:) = wd_ds
wd_av(1,0:nhgt-1) = wd_w_av(0,:)
wd_av(2,0:nhgt-1) = wd_w_av(1,:)
wd_av(3,0:nhgt-1) = wd_w_av(2,:)
wd_av(4,0:nhgt-1) = wd_w_av(3,:)
wd_av(5,0:nhgt-1) = wd_w_av(4,:)
wd_av(6,0:nhgt-1) = wd_w_av(5,:)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;  
; Plotting
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  print("Plotting dropsonde data")

;;;;;;;;;;;;;
; Set Resources
;;;;;;;;;;;;;
; set resources used for all plots
  res                             = True              ; plot mods desired
  res@gsnFrame                    = False             ; Do not draw plot 
  res@gsnDraw                     = False             ; Do not advance frame
  res@gsnMaximize                 = True              ; maximize plot
  res@vpHeightF                   = 1.5               ; change aspect ratio of plot (viewport)
  res@vpWidthF                    = 1.0          

; set title resources
  res@tiMainOn                    = False              ; turn on main title for each plot
;  res@tiMainFontHeightF           = 0.03              ; set size of font for main plot
;  res@tiMainFontThicknessF        = 1.5

; set x axis tick marks
  res@tmXTOn                      = False             ; delete top and right ticks
  res@tmYROn                      = False
  res@trYMaxF                     = 1500.0 ;max(hgt_av(0,:))          ; maximum height to plot to
  res@trYMinF                     = 0.
;  res@tiYAxisString               = "Height (m above MSL)"
  res@tiXAxisFontHeightF          = 0.03            ; set font size for x axis
  res@tmXBLabelFontHeightF        = 0.03             ; set tick mark label size for x axis
  res@tiYAxisFontHeightF          = 0.03             ; set font size for y axis
  res@tmYLLabelFontHeightF        = 0.03             ; set tick mark label size for y axis

; arrays for different colors, etc.(requires a single array of data)
  res@xyMarkLineModes             = (/"Markers","MarkLines","MarkLines","MarkLines","MarkLines","MarkLines","MarkLines"/)
  res@xyMarkers                   = (/16,16,16,16,16,16,16/)
  res@xyMarkerSizes               = (/0.005,0.01,0.01,0.01,0.01,0.01,0.01/)
  res@xyLineColors                = (/"black","firebrick","blue","gold","seagreen4","pink","steelblue2"/)
  res@xyMarkerColors              = (/"black","firebrick","blue","gold","seagreen4","pink","steelblue2"/)
  res@xyMonoLineColor             =  False                 ; allow other line colors
  res@xyDashPatterns              = (/0,0,0,0,0,2,2/)
  res@xyLineThicknesses           = (/1.5,1.5,1.5,1.5,1.5,1.5,1.5/)
  res@gsnYRefLine                 = 0.0           ; create a reference line
  res@gsnYRefLineColor            = "grey15"
  res@gsnYRefLineDashPattern      = 16

; panel resources
  pnlres                            = True
  pnlres@gsnMaximize                = True
  pnlres@gsnFrame                   = False  
  pnlres@txFontHeightF              = 0.013
  pnlres@gsnPaperOrientation        = "landscape"      ; landscape mode
  pnlres@gsnPanelYWhiteSpacePercent = 2                ; Add white space b/w plots.
  pnlres@gsnPanelXWhiteSpacePercent = 2                ; Add white space b/w plots.
  pnlres@gsnPanelScalePlotIndex     = 1
  pnlres@gsnPanelBottom             = 0.13             ; leave room for legend at bottom
  pnlres@gsnMaximize                = True	       ; fill the page

; legend resources for all the plots
  lgres                     = True
  ;lgres@pmLegendWidthF     = 0.03
  ;lgres@pmLegendHeightF    = 0.01
  lgres@vpWidthF            = 0.75               ; width of legend (NDC)
  lgres@vpHeightF           = 0.05               ; height of legend (NDC)
  lgres@lgLabelFontHeightF  = 0.0075 ;0.01
  lgres@lgAutoManage        = False              ; false allows me to set the legend directly
  lgres@lgOrientation       = "horizontal" 
  lgres@lgMonoLineColor     = False
  lgres@lgMonoItemType      = False
  lgres@lgItemTypes         = res@xyMarkLineModes
  lgres@lgDashIndexes       = res@xyDashPatterns
  lgres@lgMarkerIndexes     = res@xyMarkers
  lgres@lgMonoMarkerSize    = False
  lgres@lgMarkerSizes       = res@xyMarkerSizes
  lgres@lgMonoLineThickness = False
  lgres@lgLineThicknesses   = res@xyLineThicknesses
  lgres@lgLineColors        = res@xyLineColors   ; make the colors for the legend
  lgres@lgMarkerColors      = res@xyMarkerColors
  xpos                      = 0.15   ; xposition 
  ypos                      = 0.27 ;0.3  ; yposition (below figures)

; temperature resources
  optst                   = res
  optst@trXMaxF           = 4.0 ;max(temp_av(:,:))+5.0
  optst@trXMinF           = -8.0 ;min(temp_av(:,:))-5.0
  optst@tiMainString      = "Temperature (deg C)"
  optst@tiXAxisString     = "Temperature (deg C)"

; wind speed resources
  optsws                   = res
  optsws@trXMaxF           = 28.0 ;max(ws_av(:,:))+3.0
  optsws@trXMinF           = 0.0
  optsws@tiMainString      = "Wind Speed (m/s)"
  optsws@tiXAxisString     = "Wind Speed (m/s)"

; wind direction resources
  optswd                   = res
  optswd@trXMaxF           = 100.0 ;360.0
  optswd@trXMinF           = 0.0
  optswd@tiMainString      = "Wind Direction (deg)"
  optswd@tiXAxisString     = "Wind Direction (deg)"
  delete(optswd@xyMarkLineModes)
  optswd@xyMarkLineModes             = (/"Markers","Markers","Markers","Markers","Markers","Markers","Markers"/)

;;;;;;;;;;;;;
; Plot of single point
;;;;;;;;;;;;
  wks = gsn_open_wks("ps", outdir+fout)
  plot = new(3,graphic)

  ; Plot 0 - Temperature
  plot(2) = gsn_csm_xy(wks,temp_av,hgt_av,optst)  
  ; Plot 1 - Wind speed
  plot(0) = gsn_csm_xy(wks,ws_av,hgt_av,optsws)  
  ; Plot 1 - Wind Direction
  plot(1) = gsn_csm_xy(wks,wd_av,hgt_av,optswd)  

  print("DS and WRF point plots complete- panneling")
  ; Panel regular plots
;  pnlres@txString                   = name+" Polar Winds Dropsonde Comparison with WRF sims (weighted avg of 4 nearest points)"
  gsn_panel(wks,(/plot/),(/1,3/),pnlres)
  gsn_legend_ndc(wks,nwrf+1,(/tag0,tag1,tag2,tag3,tag4,tag5,tag6/),xpos,ypos,lgres)
  frame(wks)
  delete(wks)
  print("converting to png")
  system("convert -trim -border 10 -bordercolor white -density 300 "+  \
         "-rotate -90 -trim -border 10 "+fout+".ps "+fout+".png")


;;;;;;;;;;;;;;;;;;;;;; END script
end
